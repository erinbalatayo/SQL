#In this SQL code, I am querying a database with multiple tables regarding customer information and monthly sales to answer the following statistical questions.

--How many orders were placed in January? Remember to filter out the blank and incorrect order IDs like we did in the "dealing with messy data" section of the previous lesson!
SELECT COUNT(*)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6 
    AND orderID IS NOT NULL 
    AND orderID <> ' ';
    

--How many of those orders were for an iPhone?
SELECT COUNT(*)
FROM BIT_DB.JanSales
WHERE length(orderID) = 6 
    AND orderID IS NOT NULL 
    AND orderID <> ' '
    AND product = 'iPhone';
    
--Select the customer account numbers for all the orders that were placed in February.
SELECT distinct acctnum
FROM BIT_DB.customers AS cust
INNER JOIN BIT_DB.FebSales AS Feb
ON cust.order_id=feb.orderID
WHERE length(orderid) = 6
    AND orderid IS NOT NULL
    AND orderID <> ' ';


--Which product was the cheapest one sold in January, and what was the price?
SELECT product, MIN(price)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6
    AND orderid IS NOT NULL
    AND orderID <> ' ';

--What is the total revenue for each product sold in January? (Revenue can be calculated using the number of products sold and the price of the products).
SELECT product
    , ROUND(SUM(quantity*price),2) AS revenue
FROM BIT_DB.JanSales 
WHERE length(orderid) = 6
    AND orderID IS NOT NULL
    AND orderID <> ' '
GROUP BY product
ORDER BY revenue desc;

--Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
SELECT product
    , SUM(quantity)
    , (quantity*price) AS revenue
FROM BIT_DB.FebSales
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product;

 --How many customers ordered more than 2 products at a time in February, and what was the average amount spent for those customers?
SELECT COUNT(acctnum) AS Customer_Quantity
    , ROUND(AVG(price*quantity),2) AS Avg_Spent
FROM BIT_DB.customers AS cust
LEFT JOIN BIT_DB.FebSales AS Feb
ON cust.order_id=feb.orderid
WHERE quantity>2
    AND length(orderid)=6
    AND orderid IS NOT NULL 
    AND orderid <> ' ';

-- List all the products sold in Los Angeles in February, and include how many of each were sold.
SELECT product
    , SUM(quantity)
FROM BIT_DB.FebSales
WHERE location LIKE '%Los Angeles%'
GROUP BY product;

--Which locations in New York received at least 3 orders in January, and how many orders did they each receive? (Hint: use HAVING).
SELECT DISTINCT location, count(orderID)
FROM BIT_DB.JanSales
WHERE location LIKE '%New York%'
    AND length(orderID)=6
    AND orderID IS NOT NULL
    AND orderID <> ' '
GROUP BY location
HAVING count(orderID)>2;

--How many of each type of headphone were sold in February?
SELECT product, SUM(quantity) AS total_sold
FROM BIT_DB.FebSales
WHERE product LIKE '%headphone%'
    AND length(orderID)=6
    AND orderID IS NOT NULL
    AND orderID <> ' '
GROUP BY product;

--What was the average amount spent per account in February? (Hints: For this question, we want the average amount spent / number of accounts, not the amount spent by each account. To multiply, you can use the * symbol, and to divide, you can use the / symbol.)
SELECT (SUM(price*quantity)/count(acctnum)) AS avg_spent
FROM BIT_DB.customers AS cust
JOIN BIT_DB.FebSales AS feb
ON cust.order_id=feb.orderid
WHERE length(orderID)=6
    AND orderID IS NOT NULL
    AND orderID <> ' ';

--What was the average quantity of products purchased per account in February? (Hint: just like question 3, we want the overall average, not the average for each account individually).
SELECT (SUM(quantity)/count(acctnum)) AS avg_quantity_purchased
FROM BIT_DB.FebSales feb 
JOIN BIT_DB.customers cust
ON feb.orderid=cust.order_id
WHERE length(orderID)=6
    AND orderID IS NOT NULL
    AND orderID <> ' ';
    
--Which product brought in the most revenue in January and how much revenue did it bring in total?
SELECT product, (quantity*price) AS revenue
FROM BIT_DB.JanSales
WHERE length(orderID)=6
    AND orderID IS NOT NULL
    AND orderID <> ' '
GROUP BY product
ORDER BY revenue DESC
LIMIT 1;

